
name: Crawl Data

on:
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  workflow_dispatch:
    inputs:
      message:
        description: 'Commit message'
        required: false
        default: 'Crawl data'
      data: 
        description: 'ONLY XLSX FILES ! The data link which contains list of licensee/licensor info. (e.g sample_data.xlsx)'
        required: false
        default: sample_data.xlsx
  repository_dispatch:
    types: crawl-data

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        cache: "pip" # cache pip dependencies
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    # download chromedriver
    - name: Download chromedriver
      run: |
        wget https://chromedriver.storage.googleapis.com/108.0.5359.71/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        chmod +x chromedriver
        chromedriver --version
      

    - name: Send Job Started Notification to Slack
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':bell: Crawler is started on Github and when it is done, I will notify you ! '
        SLACK_TITLE: ':bell: Crawler is started successfully !'
        SLACK_USERNAME: orbi
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_FOOTER: 'ðŸ¤“ automated bot Orbi'

    - name: Download data if needed
      if: ${{ github.event.inputs.data != 'sample_data.xlsx' }}
      run: |
        wget --directory-prefix=/home/runner/work/IDP-Works/IDP-Works/data/ ${{ github.event.inputs.data }}

    - name: Execute the script
      uses: nick-fields/retry@v2
      id: batch_search
      with:
        timeout_minutes: 120 # 2 hours
        max_attempts: 3  # 3 times retry if failed
        command: |
          python /home/runner/work/IDP-Works/IDP-Works/run_orbi.py 
      env:
        ORBIS_EMAIL_ADDRESS: ${{ secrets.ORBIS_EMAIL_ADDRESS }}
        ORBIS_PASSWORD: ${{ secrets.ORBIS_PASSWORD }}
        ORBIS_ACCESS_URL: ${{ secrets.ORBIS_ACCESS_URL }}
        ORBIS_BATCH_SEARCH_URL: ${{ secrets.ORBIS_BATCH_SEARCH_URL }}
        ORBIS_LOGOUT_URL: ${{ secrets.ORBIS_LOGOUT_URL }}
        CHROMEDRIVER_PATH: /home/runner/work/IDP-Works/IDP-Works/chromedriver
        DATA_DIR: /home/runner/work/IDP-Works/IDP-Works/data/
        DATA_SOURCE: ${{ github.event.inputs.data }}
        LOG_DIR: /home/runner/work/IDP-Works/IDP-Works/logs/
        LOCAL_DEV: False


    - name: Send Job Failed Notification to Slack
      if: ${{ failure() && steps.batch_search.conclusion == 'failure' }}
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':x: Failed to run batch search, please check on Github. '
        SLACK_TITLE: ':x: Batch search failed at some point, in most cases this is caused due to slowness in the network (since it causes slow rendering of the page and leads to have no element we are looking for) !'
        SLACK_USERNAME: orbi
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_FOOTER: 'ðŸ¤“ automated bot Orbi'


  # get timestamp in format DD-MM-YYYY
    - name: Get timestamp
      id: get-timestamp
      run: |
        echo "::set-output name=timestamp::$(date +'%d-%m-%Y')"

    # zip the data except sample_data.xlsx
    - name: Zip data
      run: |
        zip -j -r orbis-data-${{ steps.get-timestamp.outputs.timestamp }}.zip /home/runner/work/IDP-Works/IDP-Works/data/* -x /home/runner/work/IDP-Works/IDP-Works/data/sample_data.xlsx


    - name: Upload to S3 
      uses: jakejarvis/s3-sync-action@master
      with:
        args: --acl public-read --follow-symlinks --delete
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }} 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} 
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
        SOURCE_DIR: /home/runner/work/IDP-Works/IDP-Works/data/
        DEST_DIR: orbis-data-${{ steps.get-timestamp.outputs.timestamp }}

    - name: Send data to Telegram 
      run: |
        curl -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} -F document=@orbis-data-${{ steps.get-timestamp.outputs.timestamp }}.zip https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
        curl -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} -F text="Data is ready ! Link: https://${{ secrets.AWS_S3_BUCKET }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com/orbis-data-${{ steps.get-timestamp.outputs.timestamp }}" https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage

    - name: Upload data to artifact 
      uses: actions/upload-artifact@v3
      with:
        name: orbis-data-${{ steps.get-timestamp.outputs.timestamp }}.zip
        path: |
          /home/runner/work/IDP-Works/IDP-Works/data/
          !/home/runner/work/IDP-Works/IDP-Works/data/sample_data.xlsx
        retention-days: 90

    - name:  Send Job Success Notification to Slack
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE: ':rocket: Operation is completed data link: https://${{ secrets.AWS_S3_BUCKET }}.s3.${{ secrets.AWS_REGION }}.amazonaws.com/orbis-data-${{ steps.get-timestamp.outputs.timestamp }}/ For more information check README page of the project: https://github.com/mrtrkmn/IDP-Works'
        SLACK_TITLE: Data is ready to download append file name to the link !
        SLACK_USERNAME: orbi
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_FOOTER: 'ðŸ¤“ automated bot Orbi'